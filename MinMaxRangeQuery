/**
 * @sammy.singh
 * cpp code solution to query the minimum value in a certain range out of given input values.
 */

#include<iostream>
#include<cstdio>
#include<cmath>

#define INF 999999999

using namespace std;

int min(int a, int b){
    if (a < b)
        return a;
    return b;
}

void buildSegTree(int input[], int segTree[], int low, int high, int pos){

    if (low == high){
        segTree[pos] = input[low];
        return;
    }
    int mid = (low + high) / 2;
    buildSegTree(input, segTree, low, mid, pos * 2 + 1);
    buildSegTree(input, segTree, mid + 1, high, pos * 2 + 2);

    segTree[pos] = min(segTree[pos * 2 + 1], segTree[pos * 2 + 2]);

}

int rangeMinQuery(int segTree[], int qlow, int qhigh, int low, int high, int pos){
    if (qlow <= low&&qhigh >= high)   // Total Overlap condition
        return segTree[pos];   
    if (qlow > high || qhigh < low)   // No Overlap condition
        return INF;
    int mid = (low + high) / 2;
    return min(rangeMinQuery(segTree, qlow, qhigh, low, mid, pos * 2 + 1), rangeMinQuery(segTree, qlow, qhigh, mid + 1, high, pos * 2 + 2));
}

int main(){

    int input[1000];
    int segTree[1000];
    int n;
    cout << "Enter the size of input: ";
    cin >> n;
    cout << "Enter all input values: ";
    for (int i = 0; i < n; i++)
        cin >> input[i];
    for (int i = 0; i < 4*n; i++)
        segTree[i] = INF;
    buildSegTree(input, segTree, 0, n - 1, 0);
    int qlow, qhigh;
    while (1){
        cout << "Enter the range for query...\nlow: ";
        cin >> qlow;
        cout << "high: ";
        cin >> qhigh;
        cout << "Minimum value in range: ("<<qlow<<", "<<qhigh<<") is: "<<rangeMinQuery(segTree, qlow, qhigh, 0, n - 1, 0) << endl;
    }
    return 0;
}
